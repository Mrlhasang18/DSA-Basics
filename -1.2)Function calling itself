1.What is the worst case time complexity of the following code :

/* 
 * V is sorted 
 * V.size() = N
 * The function is initially called as searchNumOccurrence(V, k, 0, N-1)
 */
int searchNumOccurrence(vector<int> &V, int k, int start, int end) {
    if (start > end) return 0;
    int mid = (start + end) / 2;
    if (V[mid] < k) return searchNumOccurrence(V, k, mid + 1, end);
    if (V[mid] > k) return searchNumOccurrence(V, k, start, mid - 1);
    return searchNumOccurrence(V, k, start, mid - 1) + 1 + searchNumOccurrence(V, k, mid + 1, end);
}





soln:
It is because of last return statement as in this we are including recursive call of both ‘if’ condition mentioned above i.e. it looks like binary 
search but here in the last return statement it looks for both left and right side Hence traverse complete array which result in overall time complexity O(n).

it’s simple in worst case the function will be called twice so the recurrence equation would be
f(n)=2(f(n/2))+1
… and by solving this recurrence relation by Master’s theorem we get time complexity as O(n).

2.What is the worst case time complexity of the following code:

int findMinPath(vector<vector<int> > &V, int r, int c) {
  int R = V.size();
  int C = V[0].size();
  if (r >= R || c >= C) return 100000000; // Infinity
  if (r == R - 1 && c == C - 1) return 0;
  return V[r][c] + min(findMinPath(V, r + 1, c), findMinPath(V, r, c + 1));
}
Assume R = V.size() and C = V[0].size().

soln:

One way to understand is that to reach the last square from the first square we have to go right C-1 times and down R-1
times. Making for a total steps of (R+C-2). So the deepest level in the tree is (R+C-2). Total number of calls can be 
calculated as shown in the solution. Remember 1 + 2 + 4 + … + N < 2*N. Here N is 2 ^ (R+C-2). So the sum is less 
than 2 * 2 ^ (R+C-2) = 2 ^ (R+C-1) < 2 ^ (R+C). As it is upper bounded we can write it as O(2 ^ (R+C)).
